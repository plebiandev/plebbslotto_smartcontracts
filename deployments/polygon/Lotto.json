{
  "address": "0xdbEc39B829662989993CA55D6aCb5D554D4cb2E4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lotto__LottoClosedCalculatingWinner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lotto__SendMoreToEnterLotto",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lotto__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lottoState",
          "type": "uint256"
        }
      ],
      "name": "Lotto__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LottoEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLottoWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLotto",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLottoState",
      "outputs": [
        {
          "internalType": "enum Lotto.LottoState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c17c2fd94957701d4291ee00718aa051018298f586364a4c93979164982dca8",
  "receipt": {
    "to": null,
    "from": "0x8FF8cba965D5281C29ca86BEd3b7C739F174CB50",
    "contractAddress": "0xdbEc39B829662989993CA55D6aCb5D554D4cb2E4",
    "transactionIndex": 65,
    "gasUsed": "1299815",
    "logsBloom": "0x
    "blockHash": "0xfcd4a81f255a4babc32908c4804e48c6193b2797a2c62feb038eeea383dd2956",
    "transactionHash": "0x7c17c2fd94957701d4291ee00718aa051018298f586364a4c93979164982dca8",
    "logs": [
      {
        "transactionIndex": 65,
        "blockNumber": 35897024,
        "transactionHash": "0x7c17c2fd94957701d4291ee00718aa051018298f586364a4c93979164982dca8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008ff8cba965d5281c29ca86bed3b7c739f174cb50",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000e1a91332145ddb000000000000000000000000000000000000000000000002659f9f09e5874c4a000000000000000000000000000000000000000000007138f1ebcde3abbb7f3100000000000000000000000000000000000000000000000264bdf5f6b372ee6f000000000000000000000000000000000000000000007138f2cd76f6ddcfdd0c",
        "logIndex": 224,
        "blockHash": "0xfcd4a81f255a4babc32908c4804e48c6193b2797a2c62feb038eeea383dd2956"
      }
    ],
    "blockNumber": 35897024,
    "cumulativeGasUsed": "9250357",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAE975071Be8F8eE67addBC1A82488F1C24858067",
    "445",
    "0xcc294a196eeeb44da2888d17c0625cc88d70d9760a69d58d853ba6581a9ab0cd",
    "604500",
    "1000000000000000000",
    "500000"
  ],
  "numDeployments": 2,
  "solcInputHash": "8a75f13183583340129dc727c4f714c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lotto__LottoClosedCalculatingWinner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lotto__SendMoreToEnterLotto\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lotto__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lottoState\",\"type\":\"uint256\"}],\"name\":\"Lotto__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LottoEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLottoWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLotto\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLottoState\",\"outputs\":[{\"internalType\":\"enum Lotto.LottoState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements the Chainlink VRF Version 2\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between lotto runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"},\"performUpkeep(bytes)\":{\"details\":\"Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner.\"}},\"title\":\"Lotto Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLottoState()\":{\"notice\":\"Getter Functions \"}},\"notice\":\"This contract is for creating a lotto contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lotto.sol\":\"Lotto\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Lotto.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Lotto__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 lottoState);\\nerror Lotto__TransferFailed();\\nerror Lotto__SendMoreToEnterLotto();\\nerror Lotto__LottoClosedCalculatingWinner();\\n\\n/**@title Lotto Contract\\n * @notice This contract is for creating a lotto contract\\n * @dev This implements the Chainlink VRF Version 2\\n */\\ncontract Lotto is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /* Type declarations */\\n    enum LottoState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    /* State variables */\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Lottery Variables\\n    uint256 private immutable i_interval;\\n    uint256 private s_lastTimeStamp;\\n    address private s_recentWinner;\\n    uint256 private i_entranceFee;\\n    address payable[] private s_players;\\n    LottoState private s_lottoState;\\n\\n    /* Events */\\n    event RequestedLottoWinner(uint256 indexed requestId);\\n    event LottoEnter(address indexed player);\\n    event WinnerPicked(address indexed player);\\n\\n    /* Functions */\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint256 interval,\\n        uint256 entranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_interval = interval;\\n        i_subscriptionId = subscriptionId;\\n        i_entranceFee = entranceFee;\\n        s_lottoState = LottoState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function enterLotto() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Lotto__SendMoreToEnterLotto();\\n        }\\n        if (s_lottoState != LottoState.OPEN) {\\n            revert Lotto__LottoClosedCalculatingWinner();\\n        }\\n        s_players.push(payable(msg.sender));\\n        // Emit an event when we update a dynamic array or mapping\\n        // Named events with the function name reversed\\n        emit LottoEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True.\\n     * the following should be true for this to return true:\\n     * 1. The time interval has passed between lotto runs.\\n     * 2. The lottery is open.\\n     * 3. The contract has ETH.\\n     * 4. Implicity, your subscription is funded with LINK.\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = LottoState.OPEN == s_lottoState;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    /**\\n     * @dev Once `checkUpkeep` is returning `true`, this function is called\\n     * and it kicks off a Chainlink VRF call to get a random winner.\\n     */\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        // require(upkeepNeeded, \\\"Upkeep not needed\\\");\\n        if (!upkeepNeeded) {\\n            revert Lotto__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lottoState)\\n            );\\n        }\\n        s_lottoState = LottoState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit RequestedLottoWinner(requestId);\\n    }\\n\\n    /**\\n     * @dev This is the function that Chainlink VRF node\\n     * calls to send the money to the random winner.\\n     */\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_players = new address payable[](0);\\n        s_lottoState = LottoState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n\\n        // maintenance_address\\n        address payable maintenance_address = payable(0x6e84ADFb9D27DaAA6217B9DdcD96D1777288a125);\\n\\n        // jackpot\\n        (bool success, ) = recentWinner.call{value: (address(this).balance * 97) / 100}(\\\"\\\"); //Pay the winner\\n        (bool maint, ) = maintenance_address.call{value: address(this).balance}(\\\"\\\"); //Transfer 3% fees to maintenance address\\n        require(maint);\\n        if (!success) {\\n            revert Lotto__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /** Getter Functions */\\n\\n    function getLottoState() public view returns (LottoState) {\\n        return s_lottoState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n}\\n\",\"keccak256\":\"0x0f10dc01bfa991fb5205b1adfbb2b5b722d2e4884680ad04d61c245f105febab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200195c3803806200195c8339818101604052810190620000389190620001ab565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508261012081815250508467ffffffffffffffff1660c08167ffffffffffffffff1660c01b81525050816002819055506000600460006101000a81548160ff02191690836001811115620001085762000107620002b3565b5b0217905550426000819055508063ffffffff166101008163ffffffff1660e01b8152505050505050505062000369565b6000815190506200014981620002e7565b92915050565b600081519050620001608162000301565b92915050565b60008151905062000177816200031b565b92915050565b6000815190506200018e8162000335565b92915050565b600081519050620001a5816200034f565b92915050565b60008060008060008060c08789031215620001cb57620001ca620002e2565b5b6000620001db89828a0162000138565b9650506020620001ee89828a0162000194565b95505060406200020189828a016200014f565b94505060606200021489828a0162000166565b93505060806200022789828a0162000166565b92505060a06200023a89828a016200017d565b9150509295509295509295565b6000620002548262000265565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f28162000247565b8114620002fe57600080fd5b50565b6200030c816200025b565b81146200031857600080fd5b50565b620003268162000285565b81146200033257600080fd5b50565b62000340816200028f565b81146200034c57600080fd5b50565b6200035a816200029f565b81146200036657600080fd5b50565b60805160601c60a05160601c60c05160c01c60e0516101005160e01c61012051611589620003d360003960008181610660015261085a0152600061050f015260006104cb015260006104ec0152600061048f015260008181610302015261035601526115896000f3fe6080604052600436106100c25760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80635f1b0fd8146101c55780636e04ff0d146101f057806390b841ec1461022e576100c2565b806309bc33a7146100c75780631fe543e3146100f25780632aea97fe1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190611104565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610edd565b610300565b005b34801561012757600080fd5b506101306103c0565b60405161013d91906110e9565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610ded565b6103d7565b005b34801561017b57600080fd5b506101846105d7565b6040516101919190611022565b60405180910390f35b3480156101a657600080fd5b506101af610601565b6040516101bc9190611104565b60405180910390f35b3480156101d157600080fd5b506101da610610565b6040516101e79190611104565b60405180910390f35b3480156101fc57600080fd5b5061021760048036038101906102129190610e3a565b61061d565b604051610225929190611066565b60405180910390f35b610236610705565b005b34801561024457600080fd5b5061024d610856565b60405161025a9190611104565b60405180910390f35b34801561026f57600080fd5b5061027861087e565b6040516102859190611104565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190610e83565b610887565b6040516102c29190611022565b60405180910390f35b3480156102d757600080fd5b506102e06108cf565b6040516102ed9190611104565b60405180910390f35b6000600254905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103a992919061103d565b60405180910390fd5b6103bc82826108dc565b5050565b6000600460009054906101000a900460ff16905090565b60006103f16040518060200160405280600081525061061d565b509050806104605747600380549050600460009054906101000a900460ff16600181111561042257610421611469565b5b6040517f42e842cb0000000000000000000000000000000000000000000000000000000081526004016104579392919061111f565b60405180910390fd5b6001600460006101000a81548160ff0219169083600181111561048657610485611469565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610550959493929190611096565b602060405180830381600087803b15801561056a57600080fd5b505af115801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190610eb0565b9050807ffd88a31c32406b28590b7ce7963258d44afe17df853230d7866b5ce79ba08cd160405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600460009054906101000a900460ff16600181111561064557610644611469565b5b6000600181111561065957610658611469565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006000544261068d919061128a565b119050600080600380549050119050600080471190508280156106ad5750835b80156106b65750805b80156106bf5750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600254341015610741576040517fedb8f12b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561075557610754611469565b5b600460009054906101000a900460ff16600181111561077757610776611469565b5b146107ae576040517fd76af9bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1dcd09d5d34186d758ca3a0b597a773e80b5b1febddac88410eced5d743cc7f660405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b60006003828154811061089d5761089c611498565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600380549050905090565b6000600380549050826000815181106108f8576108f7611498565b5b602002602001015161090a91906113da565b905060006003828154811061092257610921611498565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109ab576109aa6114c7565b5b6040519080825280602002602001820160405280156109d95781602001602082028036833780820191505090505b50600390805190602001906109ef929190610bb8565b506000600460006101000a81548160ff02191690836001811115610a1657610a15611469565b5b0217905550426000819055506000736e84adfb9d27daaa6217b9ddcd96d1777288a125905060008273ffffffffffffffffffffffffffffffffffffffff166064606147610a639190611230565b610a6d91906111ff565b604051610a799061100d565b60006040518083038185875af1925050503d8060008114610ab6576040519150601f19603f3d011682016040523d82523d6000602084013e610abb565b606091505b5050905060008273ffffffffffffffffffffffffffffffffffffffff1647604051610ae59061100d565b60006040518083038185875af1925050503d8060008114610b22576040519150601f19603f3d011682016040523d82523d6000602084013e610b27565b606091505b5050905080610b3557600080fd5b81610b6c576040517f0eb4e47f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050505050565b828054828255906000526020600020908101928215610c31579160200282015b82811115610c305782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bd8565b5b509050610c3e9190610c42565b5090565b5b80821115610c5b576000816000905550600101610c43565b5090565b6000610c72610c6d8461117b565b611156565b90508083825260208201905082856020860282011115610c9557610c94611500565b5b60005b85811015610cc55781610cab8882610dc3565b845260208401935060208301925050600181019050610c98565b5050509392505050565b6000610ce2610cdd846111a7565b611156565b905082815260208101848484011115610cfe57610cfd611505565b5b610d09848285611367565b509392505050565b600082601f830112610d2657610d256114fb565b5b8135610d36848260208601610c5f565b91505092915050565b60008083601f840112610d5557610d546114fb565b5b8235905067ffffffffffffffff811115610d7257610d716114f6565b5b602083019150836001820283011115610d8e57610d8d611500565b5b9250929050565b600082601f830112610daa57610da96114fb565b5b8135610dba848260208601610ccf565b91505092915050565b600081359050610dd28161153c565b92915050565b600081519050610de78161153c565b92915050565b60008060208385031215610e0457610e0361150f565b5b600083013567ffffffffffffffff811115610e2257610e2161150a565b5b610e2e85828601610d3f565b92509250509250929050565b600060208284031215610e5057610e4f61150f565b5b600082013567ffffffffffffffff811115610e6e57610e6d61150a565b5b610e7a84828501610d95565b91505092915050565b600060208284031215610e9957610e9861150f565b5b6000610ea784828501610dc3565b91505092915050565b600060208284031215610ec657610ec561150f565b5b6000610ed484828501610dd8565b91505092915050565b60008060408385031215610ef457610ef361150f565b5b6000610f0285828601610dc3565b925050602083013567ffffffffffffffff811115610f2357610f2261150a565b5b610f2f85828601610d11565b9150509250929050565b610f42816112be565b82525050565b610f51816112d0565b82525050565b610f60816112dc565b82525050565b6000610f71826111d8565b610f7b81856111e3565b9350610f8b818560208601611376565b610f9481611514565b840191505092915050565b610fa881611355565b82525050565b6000610fbb6000836111f4565b9150610fc682611525565b600082019050919050565b610fda816112f9565b82525050565b610fe981611327565b82525050565b610ff881611331565b82525050565b61100781611341565b82525050565b600061101882610fae565b9150819050919050565b60006020820190506110376000830184610f39565b92915050565b60006040820190506110526000830185610f39565b61105f6020830184610f39565b9392505050565b600060408201905061107b6000830185610f48565b818103602083015261108d8184610f66565b90509392505050565b600060a0820190506110ab6000830188610f57565b6110b86020830187610ffe565b6110c56040830186610fd1565b6110d26060830185610fef565b6110df6080830184610fef565b9695505050505050565b60006020820190506110fe6000830184610f9f565b92915050565b60006020820190506111196000830184610fe0565b92915050565b60006060820190506111346000830186610fe0565b6111416020830185610fe0565b61114e6040830184610fe0565b949350505050565b6000611160611171565b905061116c82826113a9565b919050565b6000604051905090565b600067ffffffffffffffff821115611196576111956114c7565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111c2576111c16114c7565b5b6111cb82611514565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061120a82611327565b915061121583611327565b9250826112255761122461143a565b5b828204905092915050565b600061123b82611327565b915061124683611327565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561127f5761127e61140b565b5b828202905092915050565b600061129582611327565b91506112a083611327565b9250828210156112b3576112b261140b565b5b828203905092915050565b60006112c982611307565b9050919050565b60008115159050919050565b6000819050919050565b60008190506112f482611528565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611360826112e6565b9050919050565b82818337600083830152505050565b60005b83811015611394578082015181840152602081019050611379565b838111156113a3576000848401525b50505050565b6113b282611514565b810181811067ffffffffffffffff821117156113d1576113d06114c7565b5b80604052505050565b60006113e582611327565b91506113f083611327565b925082611400576113ff61143a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061153957611538611469565b5b50565b61154581611327565b811461155057600080fd5b5056fea264697066735822122016ddd34c3911922efef57e1eab5829c8f18204974a7b789ac6c2b2390886a8b864736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80635f1b0fd8146101c55780636e04ff0d146101f057806390b841ec1461022e576100c2565b806309bc33a7146100c75780631fe543e3146100f25780632aea97fe1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190611104565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610edd565b610300565b005b34801561012757600080fd5b506101306103c0565b60405161013d91906110e9565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610ded565b6103d7565b005b34801561017b57600080fd5b506101846105d7565b6040516101919190611022565b60405180910390f35b3480156101a657600080fd5b506101af610601565b6040516101bc9190611104565b60405180910390f35b3480156101d157600080fd5b506101da610610565b6040516101e79190611104565b60405180910390f35b3480156101fc57600080fd5b5061021760048036038101906102129190610e3a565b61061d565b604051610225929190611066565b60405180910390f35b610236610705565b005b34801561024457600080fd5b5061024d610856565b60405161025a9190611104565b60405180910390f35b34801561026f57600080fd5b5061027861087e565b6040516102859190611104565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190610e83565b610887565b6040516102c29190611022565b60405180910390f35b3480156102d757600080fd5b506102e06108cf565b6040516102ed9190611104565b60405180910390f35b6000600254905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103a992919061103d565b60405180910390fd5b6103bc82826108dc565b5050565b6000600460009054906101000a900460ff16905090565b60006103f16040518060200160405280600081525061061d565b509050806104605747600380549050600460009054906101000a900460ff16600181111561042257610421611469565b5b6040517f42e842cb0000000000000000000000000000000000000000000000000000000081526004016104579392919061111f565b60405180910390fd5b6001600460006101000a81548160ff0219169083600181111561048657610485611469565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610550959493929190611096565b602060405180830381600087803b15801561056a57600080fd5b505af115801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190610eb0565b9050807ffd88a31c32406b28590b7ce7963258d44afe17df853230d7866b5ce79ba08cd160405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600460009054906101000a900460ff16600181111561064557610644611469565b5b6000600181111561065957610658611469565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006000544261068d919061128a565b119050600080600380549050119050600080471190508280156106ad5750835b80156106b65750805b80156106bf5750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600254341015610741576040517fedb8f12b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561075557610754611469565b5b600460009054906101000a900460ff16600181111561077757610776611469565b5b146107ae576040517fd76af9bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1dcd09d5d34186d758ca3a0b597a773e80b5b1febddac88410eced5d743cc7f660405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b60006003828154811061089d5761089c611498565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600380549050905090565b6000600380549050826000815181106108f8576108f7611498565b5b602002602001015161090a91906113da565b905060006003828154811061092257610921611498565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109ab576109aa6114c7565b5b6040519080825280602002602001820160405280156109d95781602001602082028036833780820191505090505b50600390805190602001906109ef929190610bb8565b506000600460006101000a81548160ff02191690836001811115610a1657610a15611469565b5b0217905550426000819055506000736e84adfb9d27daaa6217b9ddcd96d1777288a125905060008273ffffffffffffffffffffffffffffffffffffffff166064606147610a639190611230565b610a6d91906111ff565b604051610a799061100d565b60006040518083038185875af1925050503d8060008114610ab6576040519150601f19603f3d011682016040523d82523d6000602084013e610abb565b606091505b5050905060008273ffffffffffffffffffffffffffffffffffffffff1647604051610ae59061100d565b60006040518083038185875af1925050503d8060008114610b22576040519150601f19603f3d011682016040523d82523d6000602084013e610b27565b606091505b5050905080610b3557600080fd5b81610b6c576040517f0eb4e47f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050505050565b828054828255906000526020600020908101928215610c31579160200282015b82811115610c305782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bd8565b5b509050610c3e9190610c42565b5090565b5b80821115610c5b576000816000905550600101610c43565b5090565b6000610c72610c6d8461117b565b611156565b90508083825260208201905082856020860282011115610c9557610c94611500565b5b60005b85811015610cc55781610cab8882610dc3565b845260208401935060208301925050600181019050610c98565b5050509392505050565b6000610ce2610cdd846111a7565b611156565b905082815260208101848484011115610cfe57610cfd611505565b5b610d09848285611367565b509392505050565b600082601f830112610d2657610d256114fb565b5b8135610d36848260208601610c5f565b91505092915050565b60008083601f840112610d5557610d546114fb565b5b8235905067ffffffffffffffff811115610d7257610d716114f6565b5b602083019150836001820283011115610d8e57610d8d611500565b5b9250929050565b600082601f830112610daa57610da96114fb565b5b8135610dba848260208601610ccf565b91505092915050565b600081359050610dd28161153c565b92915050565b600081519050610de78161153c565b92915050565b60008060208385031215610e0457610e0361150f565b5b600083013567ffffffffffffffff811115610e2257610e2161150a565b5b610e2e85828601610d3f565b92509250509250929050565b600060208284031215610e5057610e4f61150f565b5b600082013567ffffffffffffffff811115610e6e57610e6d61150a565b5b610e7a84828501610d95565b91505092915050565b600060208284031215610e9957610e9861150f565b5b6000610ea784828501610dc3565b91505092915050565b600060208284031215610ec657610ec561150f565b5b6000610ed484828501610dd8565b91505092915050565b60008060408385031215610ef457610ef361150f565b5b6000610f0285828601610dc3565b925050602083013567ffffffffffffffff811115610f2357610f2261150a565b5b610f2f85828601610d11565b9150509250929050565b610f42816112be565b82525050565b610f51816112d0565b82525050565b610f60816112dc565b82525050565b6000610f71826111d8565b610f7b81856111e3565b9350610f8b818560208601611376565b610f9481611514565b840191505092915050565b610fa881611355565b82525050565b6000610fbb6000836111f4565b9150610fc682611525565b600082019050919050565b610fda816112f9565b82525050565b610fe981611327565b82525050565b610ff881611331565b82525050565b61100781611341565b82525050565b600061101882610fae565b9150819050919050565b60006020820190506110376000830184610f39565b92915050565b60006040820190506110526000830185610f39565b61105f6020830184610f39565b9392505050565b600060408201905061107b6000830185610f48565b818103602083015261108d8184610f66565b90509392505050565b600060a0820190506110ab6000830188610f57565b6110b86020830187610ffe565b6110c56040830186610fd1565b6110d26060830185610fef565b6110df6080830184610fef565b9695505050505050565b60006020820190506110fe6000830184610f9f565b92915050565b60006020820190506111196000830184610fe0565b92915050565b60006060820190506111346000830186610fe0565b6111416020830185610fe0565b61114e6040830184610fe0565b949350505050565b6000611160611171565b905061116c82826113a9565b919050565b6000604051905090565b600067ffffffffffffffff821115611196576111956114c7565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111c2576111c16114c7565b5b6111cb82611514565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061120a82611327565b915061121583611327565b9250826112255761122461143a565b5b828204905092915050565b600061123b82611327565b915061124683611327565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561127f5761127e61140b565b5b828202905092915050565b600061129582611327565b91506112a083611327565b9250828210156112b3576112b261140b565b5b828203905092915050565b60006112c982611307565b9050919050565b60008115159050919050565b6000819050919050565b60008190506112f482611528565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611360826112e6565b9050919050565b82818337600083830152505050565b60005b83811015611394578082015181840152602081019050611379565b838111156113a3576000848401525b50505050565b6113b282611514565b810181811067ffffffffffffffff821117156113d1576113d06114c7565b5b80604052505050565b60006113e582611327565b91506113f083611327565b925082611400576113ff61143a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061153957611538611469565b5b50565b61154581611327565b811461155057600080fd5b5056fea264697066735822122016ddd34c3911922efef57e1eab5829c8f18204974a7b789ac6c2b2390886a8b864736f6c63430008070033",
  "devdoc": {
    "details": "This implements the Chainlink VRF Version 2",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between lotto runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."
      },
      "performUpkeep(bytes)": {
        "details": "Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner."
      }
    },
    "title": "Lotto Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLottoState()": {
        "notice": "Getter Functions "
      }
    },
    "notice": "This contract is for creating a lotto contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 211,
        "contract": "contracts/Lotto.sol:Lotto",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 213,
        "contract": "contracts/Lotto.sol:Lotto",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 215,
        "contract": "contracts/Lotto.sol:Lotto",
        "label": "i_entranceFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 218,
        "contract": "contracts/Lotto.sol:Lotto",
        "label": "s_players",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 221,
        "contract": "contracts/Lotto.sol:Lotto",
        "label": "s_lottoState",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(LottoState)192"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LottoState)192": {
        "encoding": "inplace",
        "label": "enum Lotto.LottoState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}